/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    'chessSidechatMessage': MotiaStream<{ message: string; sender: string; role: 'white' | 'black' | 'spectator' | 'root'; timestamp: number }>
    'chessLiveAiGames': MotiaStream<{ id: string; gameId: string; players: { white: { provider: 'openai' | 'gemini' | 'claude' | 'grok'; model: string }; black: { provider: 'openai' | 'gemini' | 'claude' | 'grok'; model: string } }; createdAt: string }>
    'chessLeaderboard': MotiaStream<{ provider: 'openai' | 'gemini' | 'claude' | 'grok'; model: string; gamesPlayed: number; victories: number; checkmates: number; draws: number; illegalMoves: number; sumCentipawnScores: number; sumHighestSwing: number }>
    'chessGame': MotiaStream<{ id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; turns?: number; endGameReason?: string; players: { white: { userId?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number }; black: { userId?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number } }; check: boolean; scoreboard?: { white: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; black: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; totalMoves: number; decisiveMoment?: { moveNumber: number; evaluationSwing: number; move: string[]; fen: string } } }>
    'chessGameMove': MotiaStream<{ color: 'white' | 'black'; fenBefore: string; fenAfter: string; lastMove: string[]; check: boolean; evaluation?: { centipawnScore: number; bestMove: string; evaluationSwing: number; blunder: boolean } }>
    'chessGameMessage': MotiaStream<{ id: string; message: string; sender: string; profilePic?: string; role: 'white' | 'black' | 'spectator' | 'root'; timestamp: number; move?: { from: string; to: string; promotion?: 'q' | 'r' | 'b' | 'n' }; isIllegalMove?: boolean }>
  }

  interface Handlers {
    'PurgeStuckGames': CronHandler<never>
    'GameEnded': EventHandler<{ gameId: string }, never>
    'EvaluatePlayerMove': EventHandler<{ fenBefore: string; fenAfter: string; gameId: string; moveId: string; player: string }, never>
    'SendMessage': ApiRouteHandler<{ message: string; name: string; role: 'white' | 'black' | 'spectator' | 'root' }, ApiResponse<200, { message: string; sender: string; timestamp: number }> | ApiResponse<404, { message: string }>, never>
    'AI_Player': EventHandler<{ player: 'white' | 'black'; fenBefore: string; fen: string; lastMove?: string[]; check: boolean; gameId: string }, { topic: 'chess-game-moved'; data: { gameId: string; fenBefore: string } } | { topic: 'chess-game-ended'; data: { gameId: string } } | { topic: 'evaluate-player-move'; data: { fenBefore: string; fenAfter: string; gameId: string; moveId: string; player: string } }>
    'ChessGameMoved': EventHandler<{ gameId: string; fenBefore: string }, { topic: 'ai-move'; data: { player: 'white' | 'black'; fenBefore: string; fen: string; lastMove?: string[]; check: boolean; gameId: string } }>
    'MovePiece': ApiRouteHandler<{ promote?: 'queen' | 'rook' | 'bishop' | 'knight'; from: string; to: string }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; turns?: number; endGameReason?: string; players: { white: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number }; black: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number } }; check: boolean; scoreboard?: { white: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; black: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; totalMoves: number; decisiveMoment?: { moveNumber: number; evaluationSwing: number; move: string[]; fen: string } } }> | ApiResponse<400, { message: string }> | ApiResponse<404, { message: string }>, { topic: 'chess-game-moved'; data: { gameId: string; fenBefore: string } } | { topic: 'chess-game-ended'; data: { gameId: string } } | { topic: 'evaluate-player-move'; data: { fenBefore: string; fenAfter: string; gameId: string; moveId: string; player: string } }>
    'GetGame': ApiRouteHandler<{}, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; turns?: number; endGameReason?: string; players: { white: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number }; black: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number } }; check: boolean; scoreboard?: { white: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; black: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; totalMoves: number; decisiveMoment?: { moveNumber: number; evaluationSwing: number; move: string[]; fen: string } }; role: 'white' | 'black' | 'spectator' | 'root'; username: string; passwords?: { root: string; white: string; black: string } }> | ApiResponse<404, { message: string }>, never>
    'GetLiveAiGame': ApiRouteHandler<{ players: 'openai' | 'gemini' | 'claude' | 'grok'[] }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; turns?: number; endGameReason?: string; players: { white: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number }; black: { userId?: string; name: string; profilePic?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number } }; check: boolean; scoreboard?: { white: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; black: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; totalMoves: number; decisiveMoment?: { moveNumber: number; evaluationSwing: number; move: string[]; fen: string } } }> | ApiResponse<400, { message: string; errors?: { message: string }[] }> | ApiResponse<404, { message: string }>, { topic: 'chess-game-created'; data: { gameId: string; fenBefore: string } }>
    'CreateGame': ApiRouteHandler<{ players: { white: { ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string }; black: { ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string } } }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; turns?: number; endGameReason?: string; players: { white: { userId?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number }; black: { userId?: string; ai?: 'openai' | 'gemini' | 'claude' | 'grok'; model?: string; illegalMoveAttempts?: number; totalMoves?: number; captures?: { piece: string; score: number }[]; promotions?: number } }; check: boolean; scoreboard?: { white: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; black: { averageSwing: number; medianSwing: number; highestSwing: number; highestCentipawnScore: number; lowestCentipawnScore: number; averageCentipawnScore: number; medianCentipawnScore: number; finalCentipawnScore: number; blunders: number }; totalMoves: number; decisiveMoment?: { moveNumber: number; evaluationSwing: number; move: string[]; fen: string } } }> | ApiResponse<400, { message: string; errors: { message: string }[] }> | ApiResponse<401, { message: string }>, { topic: 'chess-game-created'; data: { gameId: string; fenBefore: string } }>
    'AvailableModels': ApiRouteHandler<{}, ApiResponse<200, { models: { openai: string[]; gemini: string[]; claude: string[]; grok: string[] } }> | ApiResponse<400, { message: string }> | ApiResponse<404, { message: string }>, never>
    'GetUser': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { id: string; name: string; profilePic: string }> | ApiResponse<404, { message: string }>, never>
    'Auth': ApiRouteHandler<{ authToken: string }, ApiResponse<200, { accessToken: string; user: { id: string; name: string; profilePic: string; email: string } }> | ApiResponse<401, { error: string }> | ApiResponse<500, { error: string }>, never>
  }
}