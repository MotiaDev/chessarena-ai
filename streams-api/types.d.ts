/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    'chessSidechatMessage': MotiaStream<{ message: string; sender: string; role: 'white' | 'black' | 'spectator' | 'root'; timestamp: number }>
    'chessLiveAiGames': MotiaStream<{ id: string; gameId: string; players: { white: 'openai' | 'gemini' | 'claude'; black: 'openai' | 'gemini' | 'claude' } }>
    'chessGame': MotiaStream<{ id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; players: { white: { name: string; ai?: 'openai' | 'gemini' | 'claude' }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } }; check: boolean }>
    'chessGameMove': MotiaStream<{ color: 'white' | 'black'; fenBefore: string; fenAfter: string; lastMove: string[]; check: boolean }>
    'chessGameMessage': MotiaStream<{ message: string; sender: string; role: 'white' | 'black' | 'spectator' | 'root'; timestamp: number; move?: { from: string; to: string; promotion?: 'q' | 'r' | 'b' | 'n' }; isIllegalMove?: boolean }>
  }

  type Handlers = {
    'SendMessage': ApiRouteHandler<{ message: string; name: string; role: 'white' | 'black' | 'spectator' | 'root' }, ApiResponse<200, { message: string; sender: string; timestamp: number }> | ApiResponse<404, { message: string }>, never>
    'AI_Player': EventHandler<{ player: 'white' | 'black'; fenBefore: string; fen: string; lastMove?: string[]; check: boolean; gameId: string }, { topic: 'chess-game-moved'; data: { gameId: string; fenBefore: string } }>
    'ChessGameMoved': EventHandler<{ gameId: string; fenBefore: string }, { topic: 'ai-move'; data: { player: 'white' | 'black'; fenBefore: string; fen: string; lastMove?: string[]; check: boolean; gameId: string } }>
    'MovePiece': ApiRouteHandler<{ password: string; promote?: 'queen' | 'rook' | 'bishop' | 'knight'; from: string; to: string }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; players: { white: { name: string; ai?: 'openai' | 'gemini' | 'claude' }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } }; check: boolean }> | ApiResponse<400, { message: string }> | ApiResponse<404, { message: string }>, { topic: 'chess-game-moved'; data: { gameId: string; fenBefore: string } }>
    'GetGame': ApiRouteHandler<{}, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; players: { white: { name: string; ai?: 'openai' | 'gemini' | 'claude' }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } }; check: boolean; role: 'white' | 'black' | 'spectator' | 'root'; username: string; passwords?: { root: string; white: string; black: string } }> | ApiResponse<404, { message: string }>, never>
    'GetLiveAiGame': ApiRouteHandler<{ players: 'openai' | 'gemini' | 'claude'[] }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; players: { white: { name: string; ai?: 'openai' | 'gemini' | 'claude' }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } }; check: boolean }> | ApiResponse<400, { message: string; errors?: { message: string }[] }>, { topic: 'chess-game-created'; data: { gameId: string; fenBefore: string } }>
    'CreateGame': ApiRouteHandler<{ players: { white: { name: string }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } } }, ApiResponse<200, { id: string; fen: string; turn: 'white' | 'black'; status: 'pending' | 'completed' | 'draw'; lastMove?: string[]; winner?: 'white' | 'black'; players: { white: { name: string; ai?: 'openai' | 'gemini' | 'claude' }; black: { name: string; ai?: 'openai' | 'gemini' | 'claude' } }; check: boolean }> | ApiResponse<400, { message: string; errors: { message: string }[] }>, { topic: 'chess-game-created'; data: { gameId: string; fenBefore: string } }>
  }
}